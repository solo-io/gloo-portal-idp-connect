info:
  title: 'Gloo Platform Portal API'
  version: 1.0.0
  description: Gloo Platform Portal Self Service Credential Management API
openapi: 3.0.0
servers:
  - url: https://api.gloo-platform-portal.com/v1
paths:
  /clients:
    post:
      description: Creates a client in the Open Id Connect Provider that the SPI (Server Provider Interface) implementation integrates with.  `glooPortalUser` and `glooPortalTeam` are optional parameters that will link the `clientId` returned with the user/team id if it is provided. In addition, if `clientMetadata` is returned, it will be stored as a json string in the database in case additional client metadata is needed in future requests to get, update, or delete the client. The `clientSecret` is never stored in the database and will only be shown to the user once. Identity token is required to validate user is associated with the given client
      operationId: CreateClient
      security:
        - identityToken: []
      requestBody:
        description: (Required) clientName for creating name of the client. `passthrough` is directly passed to the SPI (Server Provider Interface) implementation that will create the client in the Open Id Connect Provider.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientName
              properties:
                clientName:
                  type: string
                  example: "example-user-pool-developer-1"
                passthrough:
                  type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientId:
                    type: string
                    example: a0897e6d0ea94f589c38278bca4e9342
                  clientSecret:
                    type: string
                    example: c94dbd582d594e8aa04934f9c7ef0f52
                  clientName:
                    type: string
                    example: "example-user-pool-developer-1"
                  clientMetadata:
                    type: object
                    example: {}
                  passthroughResponse:
                    type: object
                    example: {
                      UserPoolClient: {
                        AllowedOAuthScopes: [
                          "email",
                          "openid"
                        ],
                      }
                    }
          description: Successfully created client
        '500':
          description: Unexpected error creating client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Creates a client in the OpenId Connect Provider
      tags:
        - Clients
  /clients/{id}:
    delete:
      description: Delete client.
      operationId: DeleteClient
      security:
        - identityToken: []
      parameters:
        - in: path
          name: "id"
          required: true
          description: (Required) ID for client to delete.
          schema:
            type: string
        - in: query
          name: "passthrough"
          description: Optionally include passthrough data as a json string
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted client.
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error deleting client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Deletes a client in the OpenId Connect Provider
      tags:
        - Clients
  /clients/{id}/scopes:
    put:
      description: Update Client Scopes.
      operationId: UpdateClientScopes
      security:
        - identityToken: []
      parameters:
        - in: path
          name: "id"
          required: true
          description: (Required) Client ID to add scope to
          schema:
            type: string
      requestBody:
        description: Add scope for a specific client. Identity token is required to validate user is associated with the given client.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - scopes
              properties:
                scopes:
                  type: array
                  items:
                      type: string
                      example: "example-scope"
                passthrough:
                  type: object
                  example: {
                    UserPoolId: "example-user-pool"
                  }
      responses:
        '204':
          description: Successfully added scopes to client
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error adding client scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Adds scope to a client in the OpenId Connect Provider
      tags:
        - Clients
  /scopes:
    post:
      description: Creates scope in the Open Id Connect Provider for a given unique identifier. Different Identity Providers associate scopes with different entities. In AWS Congito the client scope would be created for a `ResourceServer` for a `UserPool`, in keycloak the client scope would be created for a `Realm`, in Okta a client scope would be created for a `Authorization Server` which is associated with a Okta `Application` via an `Access Policy`. In Auth0, a scope is created for a `ResourceServer` which is associated with your API via the API identifier.
      operationId: CreateScope
      security:
        - identityToken: []
      requestBody:
        description: Create scope for a specific client. Identity token is required to validate user is associated with the given client.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - scope
              properties:
                scope:
                  $ref: '#/components/schemas/Scope'
                passthrough:
                  type: object
                  example: {
                    UserPoolId: "example-user-pool"
                  }
      responses:
        '201':
          description: Successfully created scope
        '409':
          description: Scope already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error creating scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Creates scope in the OpenId Connect Provider
      tags:
        - Scopes
    delete:
      description: Deletes scope in the Open Id Connect Provider for a given unique identifier. Different Identity Providers associate scopes with different entities. In AWS Congito the client scope would be created for a `ResourceServer` for a `UserPool`, in keycloak the client scope would be created for a `Realm`, in Okta a client scope would be created for a `Authorization Server` which is associated with a Okta `Application` via an `Access Policy`. In Auth0, a scope is created for a `ResourceServer` which is associated with your API via the API identifier.
      operationId: DeleteScope
      security:
        - identityToken: []
      parameters:
        - in: query
          name: "scope"
          required: true
          description: (Required) Name of the scope we'd like to delete.
          schema:
            type: string
        - in: query
          name: "passthrough"
          description: Optionally include passthrough data
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted scope.
        '404':
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error deleting scope.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Deletes scope in the OpenId Connect Provider
      tags:
        - Scopes
components:
  schemas:
    Scope:
      required:
        - value
        - description
      properties:
        value:
          type: string
          example: "example-scope"
        description:
          type: string
          example: "example scope description"
    Error:
      required:
        - code
        - message
        - reason
      properties:
        code:
          type: integer
          example: "500"
        message:
          type: string
          example: "Internal Server Error"
        reason:
          type: string
          example: "Bad Request"
  securitySchemes:
    identityToken:
      type: apiKey
      in: cookie
      name: id_token
      description: id token cookie from the identity provider used to authenticate the user
