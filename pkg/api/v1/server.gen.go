// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /client)
	DeleteClient(ctx echo.Context, params DeleteClientParams) error
	// Gets a client from the OpenId Connect Provider
	// (GET /client)
	GetClient(ctx echo.Context, params GetClientParams) error
	// Creates a client in the OpenId Connect Provider
	// (POST /client)
	CreateClient(ctx echo.Context) error
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /client/scopes)
	DeleteClientScope(ctx echo.Context, params DeleteClientScopeParams) error
	// Gets scopes for a client from the OpenId Connect Provider
	// (GET /client/scopes)
	GetClientScopes(ctx echo.Context, params GetClientScopesParams) error
	// Adds scope to a client in the OpenId Connect Provider
	// (POST /client/scopes)
	AddClientScope(ctx echo.Context) error
	// Deletes scope in the OpenId Connect Provider
	// (DELETE /scopes)
	DeleteScope(ctx echo.Context, params DeleteScopeParams) error
	// Gets scopes in the OpenId Connect Provider
	// (GET /scopes)
	GetScopes(ctx echo.Context, params GetScopesParams) error
	// Creates scope in the OpenId Connect Provider
	// (POST /scopes)
	CreateScope(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClient(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteClientParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClient(ctx, params)
	return err
}

// GetClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetClient(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClient(ctx, params)
	return err
}

// CreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClient(ctx)
	return err
}

// DeleteClientScope converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClientScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteClientScopeParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClientScope(ctx, params)
	return err
}

// GetClientScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientScopes(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientScopesParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClientScopes(ctx, params)
	return err
}

// AddClientScope converts echo context to params.
func (w *ServerInterfaceWrapper) AddClientScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddClientScope(ctx)
	return err
}

// DeleteScope converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteScopeParams
	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScope(ctx, params)
	return err
}

// GetScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetScopes(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScopesParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScopes(ctx, params)
	return err
}

// CreateScope converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScope(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/client", wrapper.DeleteClient)
	router.GET(baseURL+"/client", wrapper.GetClient)
	router.POST(baseURL+"/client", wrapper.CreateClient)
	router.DELETE(baseURL+"/client/scopes", wrapper.DeleteClientScope)
	router.GET(baseURL+"/client/scopes", wrapper.GetClientScopes)
	router.POST(baseURL+"/client/scopes", wrapper.AddClientScope)
	router.DELETE(baseURL+"/scopes", wrapper.DeleteScope)
	router.GET(baseURL+"/scopes", wrapper.GetScopes)
	router.POST(baseURL+"/scopes", wrapper.CreateScope)

}

type DeleteClientRequestObject struct {
	Params DeleteClientParams
}

type DeleteClientResponseObject interface {
	VisitDeleteClientResponse(w http.ResponseWriter) error
}

type DeleteClient204Response struct {
}

func (response DeleteClient204Response) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteClient500JSONResponse Error

func (response DeleteClient500JSONResponse) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClientRequestObject struct {
	Params GetClientParams
}

type GetClientResponseObject interface {
	VisitGetClientResponse(w http.ResponseWriter) error
}

type GetClient200JSONResponse map[string]interface{}

func (response GetClient200JSONResponse) VisitGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClient500JSONResponse Error

func (response GetClient500JSONResponse) VisitGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateClientRequestObject struct {
	Body *CreateClientJSONRequestBody
}

type CreateClientResponseObject interface {
	VisitCreateClientResponse(w http.ResponseWriter) error
}

type CreateClient200JSONResponse struct {
	ClientId            *string                 `json:"clientId,omitempty"`
	ClientMetadata      *map[string]interface{} `json:"clientMetadata,omitempty"`
	ClientName          *string                 `json:"clientName,omitempty"`
	ClientSecret        *string                 `json:"clientSecret,omitempty"`
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response CreateClient200JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateClient500JSONResponse Error

func (response CreateClient500JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteClientScopeRequestObject struct {
	Params DeleteClientScopeParams
}

type DeleteClientScopeResponseObject interface {
	VisitDeleteClientScopeResponse(w http.ResponseWriter) error
}

type DeleteClientScope204Response struct {
}

func (response DeleteClientScope204Response) VisitDeleteClientScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteClientScope500JSONResponse Error

func (response DeleteClientScope500JSONResponse) VisitDeleteClientScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClientScopesRequestObject struct {
	Params GetClientScopesParams
}

type GetClientScopesResponseObject interface {
	VisitGetClientScopesResponse(w http.ResponseWriter) error
}

type GetClientScopes200JSONResponse struct {
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
	Scopes              []Scope                 `json:"scopes"`
}

func (response GetClientScopes200JSONResponse) VisitGetClientScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClientScopes500JSONResponse Error

func (response GetClientScopes500JSONResponse) VisitGetClientScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddClientScopeRequestObject struct {
	Body *AddClientScopeJSONRequestBody
}

type AddClientScopeResponseObject interface {
	VisitAddClientScopeResponse(w http.ResponseWriter) error
}

type AddClientScope200JSONResponse struct {
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response AddClientScope200JSONResponse) VisitAddClientScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddClientScope204Response struct {
}

func (response AddClientScope204Response) VisitAddClientScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddClientScope409JSONResponse Error

func (response AddClientScope409JSONResponse) VisitAddClientScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddClientScope500JSONResponse Error

func (response AddClientScope500JSONResponse) VisitAddClientScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScopeRequestObject struct {
	Params DeleteScopeParams
}

type DeleteScopeResponseObject interface {
	VisitDeleteScopeResponse(w http.ResponseWriter) error
}

type DeleteScope204Response struct {
}

func (response DeleteScope204Response) VisitDeleteScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteScope500JSONResponse Error

func (response DeleteScope500JSONResponse) VisitDeleteScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetScopesRequestObject struct {
	Params GetScopesParams
}

type GetScopesResponseObject interface {
	VisitGetScopesResponse(w http.ResponseWriter) error
}

type GetScopes200JSONResponse struct {
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
	Scopes              []Scope                 `json:"scopes"`
}

func (response GetScopes200JSONResponse) VisitGetScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScopes500JSONResponse Error

func (response GetScopes500JSONResponse) VisitGetScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateScopeRequestObject struct {
	Body *CreateScopeJSONRequestBody
}

type CreateScopeResponseObject interface {
	VisitCreateScopeResponse(w http.ResponseWriter) error
}

type CreateScope200JSONResponse struct {
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response CreateScope200JSONResponse) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateScope204Response struct {
}

func (response CreateScope204Response) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateScope409JSONResponse Error

func (response CreateScope409JSONResponse) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateScope500JSONResponse Error

func (response CreateScope500JSONResponse) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /client)
	DeleteClient(ctx context.Context, request DeleteClientRequestObject) (DeleteClientResponseObject, error)
	// Gets a client from the OpenId Connect Provider
	// (GET /client)
	GetClient(ctx context.Context, request GetClientRequestObject) (GetClientResponseObject, error)
	// Creates a client in the OpenId Connect Provider
	// (POST /client)
	CreateClient(ctx context.Context, request CreateClientRequestObject) (CreateClientResponseObject, error)
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /client/scopes)
	DeleteClientScope(ctx context.Context, request DeleteClientScopeRequestObject) (DeleteClientScopeResponseObject, error)
	// Gets scopes for a client from the OpenId Connect Provider
	// (GET /client/scopes)
	GetClientScopes(ctx context.Context, request GetClientScopesRequestObject) (GetClientScopesResponseObject, error)
	// Adds scope to a client in the OpenId Connect Provider
	// (POST /client/scopes)
	AddClientScope(ctx context.Context, request AddClientScopeRequestObject) (AddClientScopeResponseObject, error)
	// Deletes scope in the OpenId Connect Provider
	// (DELETE /scopes)
	DeleteScope(ctx context.Context, request DeleteScopeRequestObject) (DeleteScopeResponseObject, error)
	// Gets scopes in the OpenId Connect Provider
	// (GET /scopes)
	GetScopes(ctx context.Context, request GetScopesRequestObject) (GetScopesResponseObject, error)
	// Creates scope in the OpenId Connect Provider
	// (POST /scopes)
	CreateScope(ctx context.Context, request CreateScopeRequestObject) (CreateScopeResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteClient operation middleware
func (sh *strictHandler) DeleteClient(ctx echo.Context, params DeleteClientParams) error {
	var request DeleteClientRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteClient(ctx.Request().Context(), request.(DeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteClientResponseObject); ok {
		return validResponse.VisitDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetClient operation middleware
func (sh *strictHandler) GetClient(ctx echo.Context, params GetClientParams) error {
	var request GetClientRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetClient(ctx.Request().Context(), request.(GetClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetClientResponseObject); ok {
		return validResponse.VisitGetClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateClient operation middleware
func (sh *strictHandler) CreateClient(ctx echo.Context) error {
	var request CreateClientRequestObject

	var body CreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateClient(ctx.Request().Context(), request.(CreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateClientResponseObject); ok {
		return validResponse.VisitCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteClientScope operation middleware
func (sh *strictHandler) DeleteClientScope(ctx echo.Context, params DeleteClientScopeParams) error {
	var request DeleteClientScopeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteClientScope(ctx.Request().Context(), request.(DeleteClientScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteClientScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteClientScopeResponseObject); ok {
		return validResponse.VisitDeleteClientScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetClientScopes operation middleware
func (sh *strictHandler) GetClientScopes(ctx echo.Context, params GetClientScopesParams) error {
	var request GetClientScopesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetClientScopes(ctx.Request().Context(), request.(GetClientScopesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClientScopes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetClientScopesResponseObject); ok {
		return validResponse.VisitGetClientScopesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddClientScope operation middleware
func (sh *strictHandler) AddClientScope(ctx echo.Context) error {
	var request AddClientScopeRequestObject

	var body AddClientScopeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddClientScope(ctx.Request().Context(), request.(AddClientScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddClientScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddClientScopeResponseObject); ok {
		return validResponse.VisitAddClientScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteScope operation middleware
func (sh *strictHandler) DeleteScope(ctx echo.Context, params DeleteScopeParams) error {
	var request DeleteScopeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteScope(ctx.Request().Context(), request.(DeleteScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteScopeResponseObject); ok {
		return validResponse.VisitDeleteScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetScopes operation middleware
func (sh *strictHandler) GetScopes(ctx echo.Context, params GetScopesParams) error {
	var request GetScopesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetScopes(ctx.Request().Context(), request.(GetScopesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScopes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetScopesResponseObject); ok {
		return validResponse.VisitGetScopesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateScope operation middleware
func (sh *strictHandler) CreateScope(ctx echo.Context) error {
	var request CreateScopeRequestObject

	var body CreateScopeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateScope(ctx.Request().Context(), request.(CreateScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateScopeResponseObject); ok {
		return validResponse.VisitCreateScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
