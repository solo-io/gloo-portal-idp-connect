// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a client in the OpenId Connect Provider
	// (POST /clients)
	CreateClient(ctx echo.Context) error
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /clients/{id})
	DeleteClient(ctx echo.Context, id string, params DeleteClientParams) error
	// Adds scope to a client in the OpenId Connect Provider
	// (PUT /clients/{id}/scopes)
	UpdateClientScopes(ctx echo.Context, id string) error
	// Deletes scope in the OpenId Connect Provider
	// (DELETE /scopes)
	DeleteScope(ctx echo.Context, params DeleteScopeParams) error
	// Creates scope in the OpenId Connect Provider
	// (POST /scopes)
	CreateScope(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClient(ctx)
	return err
}

// DeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteClientParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClient(ctx, id, params)
	return err
}

// UpdateClientScopes converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClientScopes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateClientScopes(ctx, id)
	return err
}

// DeleteScope converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteScopeParams
	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScope(ctx, params)
	return err
}

// CreateScope converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScope(ctx echo.Context) error {
	var err error

	ctx.Set(IdentityTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScope(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/clients", wrapper.CreateClient)
	router.DELETE(baseURL+"/clients/:id", wrapper.DeleteClient)
	router.PUT(baseURL+"/clients/:id/scopes", wrapper.UpdateClientScopes)
	router.DELETE(baseURL+"/scopes", wrapper.DeleteScope)
	router.POST(baseURL+"/scopes", wrapper.CreateScope)

}

type CreateClientRequestObject struct {
	Body *CreateClientJSONRequestBody
}

type CreateClientResponseObject interface {
	VisitCreateClientResponse(w http.ResponseWriter) error
}

type CreateClient201JSONResponse struct {
	ClientId            *string                 `json:"clientId,omitempty"`
	ClientMetadata      *map[string]interface{} `json:"clientMetadata,omitempty"`
	ClientName          *string                 `json:"clientName,omitempty"`
	ClientSecret        *string                 `json:"clientSecret,omitempty"`
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response CreateClient201JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateClient500JSONResponse Error

func (response CreateClient500JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteClientRequestObject struct {
	Id     string `json:"id"`
	Params DeleteClientParams
}

type DeleteClientResponseObject interface {
	VisitDeleteClientResponse(w http.ResponseWriter) error
}

type DeleteClient204Response struct {
}

func (response DeleteClient204Response) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteClient404JSONResponse Error

func (response DeleteClient404JSONResponse) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteClient500JSONResponse Error

func (response DeleteClient500JSONResponse) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateClientScopesRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateClientScopesJSONRequestBody
}

type UpdateClientScopesResponseObject interface {
	VisitUpdateClientScopesResponse(w http.ResponseWriter) error
}

type UpdateClientScopes204Response struct {
}

func (response UpdateClientScopes204Response) VisitUpdateClientScopesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateClientScopes404JSONResponse Error

func (response UpdateClientScopes404JSONResponse) VisitUpdateClientScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateClientScopes500JSONResponse Error

func (response UpdateClientScopes500JSONResponse) VisitUpdateClientScopesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScopeRequestObject struct {
	Params DeleteScopeParams
}

type DeleteScopeResponseObject interface {
	VisitDeleteScopeResponse(w http.ResponseWriter) error
}

type DeleteScope204Response struct {
}

func (response DeleteScope204Response) VisitDeleteScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteScope404JSONResponse Error

func (response DeleteScope404JSONResponse) VisitDeleteScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScope500JSONResponse Error

func (response DeleteScope500JSONResponse) VisitDeleteScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateScopeRequestObject struct {
	Body *CreateScopeJSONRequestBody
}

type CreateScopeResponseObject interface {
	VisitCreateScopeResponse(w http.ResponseWriter) error
}

type CreateScope201Response struct {
}

func (response CreateScope201Response) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateScope409JSONResponse Error

func (response CreateScope409JSONResponse) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateScope500JSONResponse Error

func (response CreateScope500JSONResponse) VisitCreateScopeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates a client in the OpenId Connect Provider
	// (POST /clients)
	CreateClient(ctx context.Context, request CreateClientRequestObject) (CreateClientResponseObject, error)
	// Deletes a client in the OpenId Connect Provider
	// (DELETE /clients/{id})
	DeleteClient(ctx context.Context, request DeleteClientRequestObject) (DeleteClientResponseObject, error)
	// Adds scope to a client in the OpenId Connect Provider
	// (PUT /clients/{id}/scopes)
	UpdateClientScopes(ctx context.Context, request UpdateClientScopesRequestObject) (UpdateClientScopesResponseObject, error)
	// Deletes scope in the OpenId Connect Provider
	// (DELETE /scopes)
	DeleteScope(ctx context.Context, request DeleteScopeRequestObject) (DeleteScopeResponseObject, error)
	// Creates scope in the OpenId Connect Provider
	// (POST /scopes)
	CreateScope(ctx context.Context, request CreateScopeRequestObject) (CreateScopeResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateClient operation middleware
func (sh *strictHandler) CreateClient(ctx echo.Context) error {
	var request CreateClientRequestObject

	var body CreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateClient(ctx.Request().Context(), request.(CreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateClientResponseObject); ok {
		return validResponse.VisitCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteClient operation middleware
func (sh *strictHandler) DeleteClient(ctx echo.Context, id string, params DeleteClientParams) error {
	var request DeleteClientRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteClient(ctx.Request().Context(), request.(DeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteClientResponseObject); ok {
		return validResponse.VisitDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateClientScopes operation middleware
func (sh *strictHandler) UpdateClientScopes(ctx echo.Context, id string) error {
	var request UpdateClientScopesRequestObject

	request.Id = id

	var body UpdateClientScopesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateClientScopes(ctx.Request().Context(), request.(UpdateClientScopesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateClientScopes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateClientScopesResponseObject); ok {
		return validResponse.VisitUpdateClientScopesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteScope operation middleware
func (sh *strictHandler) DeleteScope(ctx echo.Context, params DeleteScopeParams) error {
	var request DeleteScopeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteScope(ctx.Request().Context(), request.(DeleteScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteScopeResponseObject); ok {
		return validResponse.VisitDeleteScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateScope operation middleware
func (sh *strictHandler) CreateScope(ctx echo.Context) error {
	var request CreateScopeRequestObject

	var body CreateScopeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateScope(ctx.Request().Context(), request.(CreateScopeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateScope")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateScopeResponseObject); ok {
		return validResponse.VisitCreateScopeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
