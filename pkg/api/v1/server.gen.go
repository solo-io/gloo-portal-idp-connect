// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates API Product in the OpenID Connect Provider. Then, you can add this API Product to the application for your Portal applications with the `PUT /applications/{name}/api-products` API request
	// (POST /api-products)
	CreateAPIProduct(ctx echo.Context) error
	// Deletes API Product in the OpenID Connect Provider.
	// (DELETE /api-products/{name})
	DeleteAPIProduct(ctx echo.Context, name string, params DeleteAPIProductParams) error
	// Creates an application.
	// (POST /applications)
	CreateApplication(ctx echo.Context) error
	// Deletes an application.
	// (DELETE /applications/{name})
	DeleteApplication(ctx echo.Context, name string, params DeleteApplicationParams) error
	// Adds API Product to an application.
	// (PUT /applications/{name}/api-products)
	UpdateAppAPIProducts(ctx echo.Context, name string) error
	// Deletes an application's Oauth2 client in the OpenID Connect Provider.
	// (DELETE /applications/{name}/oauth2)
	DeleteAppOauthClient(ctx echo.Context, name string) error
	// Registers a client in the OpenID Connect Provider associated with the application.
	// (POST /applications/{name}/oauth2)
	RegisterAppOauthClient(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAPIProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAPIProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAPIProduct(ctx)
	return err
}

// DeleteAPIProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAPIProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAPIProductParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAPIProduct(ctx, name, params)
	return err
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApplication(ctx)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteApplicationParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApplication(ctx, name, params)
	return err
}

// UpdateAppAPIProducts converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAppAPIProducts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAppAPIProducts(ctx, name)
	return err
}

// DeleteAppOauthClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAppOauthClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAppOauthClient(ctx, name)
	return err
}

// RegisterAppOauthClient converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterAppOauthClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterAppOauthClient(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api-products", wrapper.CreateAPIProduct)
	router.DELETE(baseURL+"/api-products/:name", wrapper.DeleteAPIProduct)
	router.POST(baseURL+"/applications", wrapper.CreateApplication)
	router.DELETE(baseURL+"/applications/:name", wrapper.DeleteApplication)
	router.PUT(baseURL+"/applications/:name/api-products", wrapper.UpdateAppAPIProducts)
	router.DELETE(baseURL+"/applications/:name/oauth2", wrapper.DeleteAppOauthClient)
	router.POST(baseURL+"/applications/:name/oauth2", wrapper.RegisterAppOauthClient)

}

type CreateAPIProductRequestObject struct {
	Body *CreateAPIProductJSONRequestBody
}

type CreateAPIProductResponseObject interface {
	VisitCreateAPIProductResponse(w http.ResponseWriter) error
}

type CreateAPIProduct201Response struct {
}

func (response CreateAPIProduct201Response) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateAPIProduct400JSONResponse Error

func (response CreateAPIProduct400JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIProduct409JSONResponse Error

func (response CreateAPIProduct409JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIProduct500JSONResponse Error

func (response CreateAPIProduct500JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIProductRequestObject struct {
	Name   string `json:"name"`
	Params DeleteAPIProductParams
}

type DeleteAPIProductResponseObject interface {
	VisitDeleteAPIProductResponse(w http.ResponseWriter) error
}

type DeleteAPIProduct204Response struct {
}

func (response DeleteAPIProduct204Response) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAPIProduct404JSONResponse Error

func (response DeleteAPIProduct404JSONResponse) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIProduct500JSONResponse Error

func (response DeleteAPIProduct500JSONResponse) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplicationRequestObject struct {
	Body *CreateApplicationJSONRequestBody
}

type CreateApplicationResponseObject interface {
	VisitCreateApplicationResponse(w http.ResponseWriter) error
}

type CreateApplication201JSONResponse struct {
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response CreateApplication201JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplication400JSONResponse Error

func (response CreateApplication400JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplication409JSONResponse Error

func (response CreateApplication409JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplication500JSONResponse Error

func (response CreateApplication500JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplicationRequestObject struct {
	Name   string `json:"name"`
	Params DeleteApplicationParams
}

type DeleteApplicationResponseObject interface {
	VisitDeleteApplicationResponse(w http.ResponseWriter) error
}

type DeleteApplication204Response struct {
}

func (response DeleteApplication204Response) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApplication404JSONResponse Error

func (response DeleteApplication404JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplication500JSONResponse Error

func (response DeleteApplication500JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAppAPIProductsRequestObject struct {
	Name string `json:"name"`
	Body *UpdateAppAPIProductsJSONRequestBody
}

type UpdateAppAPIProductsResponseObject interface {
	VisitUpdateAppAPIProductsResponse(w http.ResponseWriter) error
}

type UpdateAppAPIProducts204Response struct {
}

func (response UpdateAppAPIProducts204Response) VisitUpdateAppAPIProductsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAppAPIProducts400JSONResponse Error

func (response UpdateAppAPIProducts400JSONResponse) VisitUpdateAppAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAppAPIProducts404JSONResponse Error

func (response UpdateAppAPIProducts404JSONResponse) VisitUpdateAppAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAppAPIProducts500JSONResponse Error

func (response UpdateAppAPIProducts500JSONResponse) VisitUpdateAppAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAppOauthClientRequestObject struct {
	Name string `json:"name"`
}

type DeleteAppOauthClientResponseObject interface {
	VisitDeleteAppOauthClientResponse(w http.ResponseWriter) error
}

type DeleteAppOauthClient204Response struct {
}

func (response DeleteAppOauthClient204Response) VisitDeleteAppOauthClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAppOauthClient404JSONResponse Error

func (response DeleteAppOauthClient404JSONResponse) VisitDeleteAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAppOauthClient500JSONResponse Error

func (response DeleteAppOauthClient500JSONResponse) VisitDeleteAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RegisterAppOauthClientRequestObject struct {
	Name string `json:"name"`
}

type RegisterAppOauthClientResponseObject interface {
	VisitRegisterAppOauthClientResponse(w http.ResponseWriter) error
}

type RegisterAppOauthClient201JSONResponse struct {
	ClientId            *string                 `json:"clientId,omitempty"`
	ClientName          *string                 `json:"clientName,omitempty"`
	ClientSecret        *string                 `json:"clientSecret,omitempty"`
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response RegisterAppOauthClient201JSONResponse) VisitRegisterAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterAppOauthClient404JSONResponse Error

func (response RegisterAppOauthClient404JSONResponse) VisitRegisterAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RegisterAppOauthClient409JSONResponse Error

func (response RegisterAppOauthClient409JSONResponse) VisitRegisterAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RegisterAppOauthClient500JSONResponse Error

func (response RegisterAppOauthClient500JSONResponse) VisitRegisterAppOauthClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates API Product in the OpenID Connect Provider. Then, you can add this API Product to the application for your Portal applications with the `PUT /applications/{name}/api-products` API request
	// (POST /api-products)
	CreateAPIProduct(ctx context.Context, request CreateAPIProductRequestObject) (CreateAPIProductResponseObject, error)
	// Deletes API Product in the OpenID Connect Provider.
	// (DELETE /api-products/{name})
	DeleteAPIProduct(ctx context.Context, request DeleteAPIProductRequestObject) (DeleteAPIProductResponseObject, error)
	// Creates an application.
	// (POST /applications)
	CreateApplication(ctx context.Context, request CreateApplicationRequestObject) (CreateApplicationResponseObject, error)
	// Deletes an application.
	// (DELETE /applications/{name})
	DeleteApplication(ctx context.Context, request DeleteApplicationRequestObject) (DeleteApplicationResponseObject, error)
	// Adds API Product to an application.
	// (PUT /applications/{name}/api-products)
	UpdateAppAPIProducts(ctx context.Context, request UpdateAppAPIProductsRequestObject) (UpdateAppAPIProductsResponseObject, error)
	// Deletes an application's Oauth2 client in the OpenID Connect Provider.
	// (DELETE /applications/{name}/oauth2)
	DeleteAppOauthClient(ctx context.Context, request DeleteAppOauthClientRequestObject) (DeleteAppOauthClientResponseObject, error)
	// Registers a client in the OpenID Connect Provider associated with the application.
	// (POST /applications/{name}/oauth2)
	RegisterAppOauthClient(ctx context.Context, request RegisterAppOauthClientRequestObject) (RegisterAppOauthClientResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateAPIProduct operation middleware
func (sh *strictHandler) CreateAPIProduct(ctx echo.Context) error {
	var request CreateAPIProductRequestObject

	var body CreateAPIProductJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAPIProduct(ctx.Request().Context(), request.(CreateAPIProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAPIProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateAPIProductResponseObject); ok {
		return validResponse.VisitCreateAPIProductResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAPIProduct operation middleware
func (sh *strictHandler) DeleteAPIProduct(ctx echo.Context, name string, params DeleteAPIProductParams) error {
	var request DeleteAPIProductRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAPIProduct(ctx.Request().Context(), request.(DeleteAPIProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAPIProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAPIProductResponseObject); ok {
		return validResponse.VisitDeleteAPIProductResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateApplication operation middleware
func (sh *strictHandler) CreateApplication(ctx echo.Context) error {
	var request CreateApplicationRequestObject

	var body CreateApplicationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApplication(ctx.Request().Context(), request.(CreateApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateApplicationResponseObject); ok {
		return validResponse.VisitCreateApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApplication operation middleware
func (sh *strictHandler) DeleteApplication(ctx echo.Context, name string, params DeleteApplicationParams) error {
	var request DeleteApplicationRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApplication(ctx.Request().Context(), request.(DeleteApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteApplicationResponseObject); ok {
		return validResponse.VisitDeleteApplicationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateAppAPIProducts operation middleware
func (sh *strictHandler) UpdateAppAPIProducts(ctx echo.Context, name string) error {
	var request UpdateAppAPIProductsRequestObject

	request.Name = name

	var body UpdateAppAPIProductsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAppAPIProducts(ctx.Request().Context(), request.(UpdateAppAPIProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAppAPIProducts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateAppAPIProductsResponseObject); ok {
		return validResponse.VisitUpdateAppAPIProductsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAppOauthClient operation middleware
func (sh *strictHandler) DeleteAppOauthClient(ctx echo.Context, name string) error {
	var request DeleteAppOauthClientRequestObject

	request.Name = name

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAppOauthClient(ctx.Request().Context(), request.(DeleteAppOauthClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAppOauthClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAppOauthClientResponseObject); ok {
		return validResponse.VisitDeleteAppOauthClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RegisterAppOauthClient operation middleware
func (sh *strictHandler) RegisterAppOauthClient(ctx echo.Context, name string) error {
	var request RegisterAppOauthClientRequestObject

	request.Name = name

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterAppOauthClient(ctx.Request().Context(), request.(RegisterAppOauthClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterAppOauthClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterAppOauthClientResponseObject); ok {
		return validResponse.VisitRegisterAppOauthClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
