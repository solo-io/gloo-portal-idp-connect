// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates API Product in the OpenID Connect Provider. Then, you can add this API Product to the client ID for your Portal apps with the `PUT /clients/{id}/api-products` API request
	// (POST /api-products)
	CreateAPIProduct(ctx echo.Context) error
	// Deletes API Product in the OpenID Connect Provider.
	// (DELETE /api-products/{apiProduct})
	DeleteAPIProduct(ctx echo.Context, apiProduct string, params DeleteAPIProductParams) error
	// Creates a client in the OpenID Connect Provider.
	// (POST /clients)
	CreateClient(ctx echo.Context) error
	// Deletes a client in the OpenID Connect Provider.
	// (DELETE /clients/{id})
	DeleteClient(ctx echo.Context, id string, params DeleteClientParams) error
	// Adds API Product to a client in the OpenID Connect Provider
	// (PUT /clients/{id}/api-products)
	UpdateClientAPIProducts(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAPIProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAPIProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAPIProduct(ctx)
	return err
}

// DeleteAPIProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAPIProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiProduct" -------------
	var apiProduct string

	err = runtime.BindStyledParameterWithOptions("simple", "apiProduct", ctx.Param("apiProduct"), &apiProduct, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiProduct: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAPIProductParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAPIProduct(ctx, apiProduct, params)
	return err
}

// CreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClient(ctx)
	return err
}

// DeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteClientParams
	// ------------- Optional query parameter "passthrough" -------------

	err = runtime.BindQueryParameter("form", true, false, "passthrough", ctx.QueryParams(), &params.Passthrough)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter passthrough: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClient(ctx, id, params)
	return err
}

// UpdateClientAPIProducts converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClientAPIProducts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateClientAPIProducts(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api-products", wrapper.CreateAPIProduct)
	router.DELETE(baseURL+"/api-products/:apiProduct", wrapper.DeleteAPIProduct)
	router.POST(baseURL+"/clients", wrapper.CreateClient)
	router.DELETE(baseURL+"/clients/:id", wrapper.DeleteClient)
	router.PUT(baseURL+"/clients/:id/api-products", wrapper.UpdateClientAPIProducts)

}

type CreateAPIProductRequestObject struct {
	Body *CreateAPIProductJSONRequestBody
}

type CreateAPIProductResponseObject interface {
	VisitCreateAPIProductResponse(w http.ResponseWriter) error
}

type CreateAPIProduct201Response struct {
}

func (response CreateAPIProduct201Response) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateAPIProduct400JSONResponse Error

func (response CreateAPIProduct400JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIProduct409JSONResponse Error

func (response CreateAPIProduct409JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIProduct500JSONResponse Error

func (response CreateAPIProduct500JSONResponse) VisitCreateAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIProductRequestObject struct {
	ApiProduct string `json:"apiProduct"`
	Params     DeleteAPIProductParams
}

type DeleteAPIProductResponseObject interface {
	VisitDeleteAPIProductResponse(w http.ResponseWriter) error
}

type DeleteAPIProduct204Response struct {
}

func (response DeleteAPIProduct204Response) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAPIProduct404JSONResponse Error

func (response DeleteAPIProduct404JSONResponse) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIProduct500JSONResponse Error

func (response DeleteAPIProduct500JSONResponse) VisitDeleteAPIProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateClientRequestObject struct {
	Body *CreateClientJSONRequestBody
}

type CreateClientResponseObject interface {
	VisitCreateClientResponse(w http.ResponseWriter) error
}

type CreateClient201JSONResponse struct {
	ClientId            *string                 `json:"clientId,omitempty"`
	ClientName          *string                 `json:"clientName,omitempty"`
	ClientSecret        *string                 `json:"clientSecret,omitempty"`
	PassthroughResponse *map[string]interface{} `json:"passthroughResponse,omitempty"`
}

func (response CreateClient201JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateClient400JSONResponse Error

func (response CreateClient400JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateClient500JSONResponse Error

func (response CreateClient500JSONResponse) VisitCreateClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteClientRequestObject struct {
	Id     string `json:"id"`
	Params DeleteClientParams
}

type DeleteClientResponseObject interface {
	VisitDeleteClientResponse(w http.ResponseWriter) error
}

type DeleteClient204Response struct {
}

func (response DeleteClient204Response) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteClient404JSONResponse Error

func (response DeleteClient404JSONResponse) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteClient500JSONResponse Error

func (response DeleteClient500JSONResponse) VisitDeleteClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateClientAPIProductsRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateClientAPIProductsJSONRequestBody
}

type UpdateClientAPIProductsResponseObject interface {
	VisitUpdateClientAPIProductsResponse(w http.ResponseWriter) error
}

type UpdateClientAPIProducts204Response struct {
}

func (response UpdateClientAPIProducts204Response) VisitUpdateClientAPIProductsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateClientAPIProducts400JSONResponse Error

func (response UpdateClientAPIProducts400JSONResponse) VisitUpdateClientAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateClientAPIProducts404JSONResponse Error

func (response UpdateClientAPIProducts404JSONResponse) VisitUpdateClientAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateClientAPIProducts500JSONResponse Error

func (response UpdateClientAPIProducts500JSONResponse) VisitUpdateClientAPIProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates API Product in the OpenID Connect Provider. Then, you can add this API Product to the client ID for your Portal apps with the `PUT /clients/{id}/api-products` API request
	// (POST /api-products)
	CreateAPIProduct(ctx context.Context, request CreateAPIProductRequestObject) (CreateAPIProductResponseObject, error)
	// Deletes API Product in the OpenID Connect Provider.
	// (DELETE /api-products/{apiProduct})
	DeleteAPIProduct(ctx context.Context, request DeleteAPIProductRequestObject) (DeleteAPIProductResponseObject, error)
	// Creates a client in the OpenID Connect Provider.
	// (POST /clients)
	CreateClient(ctx context.Context, request CreateClientRequestObject) (CreateClientResponseObject, error)
	// Deletes a client in the OpenID Connect Provider.
	// (DELETE /clients/{id})
	DeleteClient(ctx context.Context, request DeleteClientRequestObject) (DeleteClientResponseObject, error)
	// Adds API Product to a client in the OpenID Connect Provider
	// (PUT /clients/{id}/api-products)
	UpdateClientAPIProducts(ctx context.Context, request UpdateClientAPIProductsRequestObject) (UpdateClientAPIProductsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateAPIProduct operation middleware
func (sh *strictHandler) CreateAPIProduct(ctx echo.Context) error {
	var request CreateAPIProductRequestObject

	var body CreateAPIProductJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAPIProduct(ctx.Request().Context(), request.(CreateAPIProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAPIProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateAPIProductResponseObject); ok {
		return validResponse.VisitCreateAPIProductResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAPIProduct operation middleware
func (sh *strictHandler) DeleteAPIProduct(ctx echo.Context, apiProduct string, params DeleteAPIProductParams) error {
	var request DeleteAPIProductRequestObject

	request.ApiProduct = apiProduct
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAPIProduct(ctx.Request().Context(), request.(DeleteAPIProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAPIProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAPIProductResponseObject); ok {
		return validResponse.VisitDeleteAPIProductResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateClient operation middleware
func (sh *strictHandler) CreateClient(ctx echo.Context) error {
	var request CreateClientRequestObject

	var body CreateClientJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateClient(ctx.Request().Context(), request.(CreateClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateClientResponseObject); ok {
		return validResponse.VisitCreateClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteClient operation middleware
func (sh *strictHandler) DeleteClient(ctx echo.Context, id string, params DeleteClientParams) error {
	var request DeleteClientRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteClient(ctx.Request().Context(), request.(DeleteClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteClientResponseObject); ok {
		return validResponse.VisitDeleteClientResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateClientAPIProducts operation middleware
func (sh *strictHandler) UpdateClientAPIProducts(ctx echo.Context, id string) error {
	var request UpdateClientAPIProductsRequestObject

	request.Id = id

	var body UpdateClientAPIProductsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateClientAPIProducts(ctx.Request().Context(), request.(UpdateClientAPIProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateClientAPIProducts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateClientAPIProductsResponseObject); ok {
		return validResponse.VisitUpdateClientAPIProductsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
