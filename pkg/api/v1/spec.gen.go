// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY7W7bNhR9lQtuQFvAsZzEWWP/c+NtMIa1xtr+KgKEEa9sthLJkpRbI/C7DyQlm5KV",
	"2um6ZMCAAo1k8n6fw0PdkVQWSgoU1pDxHTHpEgvq/5woPteSlal1T0pLhdpy9L8xNKnmynIp3CN+pYXK",
	"kYzrv2Ayn0G1G+LFPWLXyi00VnOxIJseEbTATiMnVPETVYWwt3HTIxo/l1wjI+MPwcr1pkd+1Vrq/YhT",
	"ybyXygoXFheonf8CjaGLVghvLbWlgSvJEP6sFnTErpGadgl8AFD9cihsH9Yuhq3F641byUUm98pNXmEm",
	"NcJalnCLCy56YNBCqeD3XEqY59RmUhcwl9rSHL5wu3RrNbxRKGZTuJJCYGrh+ZvZ9OoFKC1XnKHuw7sl",
	"irDcLrmB2XS+XTuZz3reYUoFFFTQBYJdIqQ5d5MDVLC45Qa4qHzOpldbF2CX1MICLVBjZMqpRRbFVwVM",
	"lcp5Sl2ypg+/SQ2FS9fVQhf+tUs4+P/QmTKTqbl+vrRWmXGSuKe+kbnsc5kscilPlF+W5NSiscmLvusS",
	"t755nfZalSA9skJtQjNO+4P+wI2CVCio4mRMzv2rHlHULv3sJdEg+xdKGrvf1yuNLqIGdrjwebrWwYxt",
	"o5jXTSPesfZlmbGtkcl8Nt8Cx80bGvtKsnVAgrAovP+o1MnHapADA+wDiDbo4GeNGRmTn5IdfSQVdyQR",
	"cbTHPTJyvYWGvP2Ifu2m11mRRkEyqbunpzE2JHZrdYk+DqOkMCGbs8HpfgPelmmKxmRlnq8h9b4bY913",
	"fR4OBg+q4rcqFbiqI/GZWNGcM+BClbXb0b/vNi40zTVStgb8yo01PoaLx0j9vcCvClNXevRM6hvBxaLV",
	"iU2PmLIoqF4fhk7EevMG3e1IjTIWaC82YaU3EWXp5+8+tqrJE+Fm/v4dJPFvyR1nmwYR3HhXFTg9B9GF",
	"cSCJidQdBL0mgSR37qzbhPHN0eL+IE/9+wcxSQAWLPgKBZSCfy4ROENheca7eCa4aPCMopoWaFG7LNoh",
	"Pf+rwuMLeE0LBJn5cOIIv+AzBjn/hK7uITXnl7vtjktJrRXCf22I96LJax+613vwHx6Af/DfBf/h4+JQ",
	"SEd6pWBPCEFfjAMQPDBzXRA8NPMReiQt7fLs8NnpkByh1U3ZWiGE7Q7z3ID758rHkLlJu0X/uNC7A4WK",
	"+3HiNYzLKlYF3Gm/AoUNbrf2AiX04bW0uNt5E2TTW0w12hsXj8AVajBWamR11Ri19JYa9OKKGzBL+UXU",
	"lFQa1CBFvgYpUuzDH4gq8JfxVt26gn5CyEpbaqxpxtT7Xb1VJNbcu8Bo90mKN5PSLie72v4wYXG//ndJ",
	"nigp8xOGK8zdppPTI28CR6iLiJLcHs+A28NGRCQV2nW0qPjOOgQvruJxLejgcvQSf2EDpKNhdnE5Ss8v",
	"z15e3qZ0iKPz4VnXrSRYev1P61obCnPaNJWOhuyWXVyesYvREC8pHQxH58NslL7EbJBdnHV26WBHOgVY",
	"Xf2n015PrHu2BeiUPN9mvJhiIz7tolgnUA6LitjZvaqgwRLHyoLZNGiQKJlDOoCzR1IBjaQfTQVElfhP",
	"qYBmNTpVQGsqHyAEjpjS/ft02SEJ3itGm/P6rKFOzP74hi0TpXa61jxgguOGzaZuet2tonmh+IGT/GNv",
	"9f6RWyzMd3yM276gWtP1N6795qiTedIqW7ibGIUpz3japqBDh/IhkFPGsN2mDsQ/0bX/f0g0lLEWzbRw",
	"2+ScgFrjGcagdUdg41vkVnfHBpfUAPVD4Lr9/fzkIkG9qrmh1DkZk/rTI1W8H744Vl8Uq0+P/VQWyeqU",
	"bK43fwcAAP//n2nwxoEXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
