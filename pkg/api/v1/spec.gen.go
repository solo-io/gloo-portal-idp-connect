// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY7W7bNhR9lQttQFtAsZzEWWP/c+NtEIa1xtr+KgKEEa9sthLJkpRbI/C7DyRlmZKV",
	"OsmyZMCAAo1k8n6fwyPeRJkopeDIjY4mN5HOllgS9+dUsrkStMqMfZJKSFSGofuNos4Uk4YJbh/xOyll",
	"gdFk+xdM5ynUuyFcHEdmLe1CbRTji2gTR5yU2GvkiEh2JOsQ9jZu4kjh14oppNHkk7dyuYmjX5USaj/i",
	"TFDnpbbCuMEFKuu/RK3JohPCe0NMpeFCUIQ/6wU9sSskulsCFwDUvxwK24W1i6GxeLmxKxnPxV65ozeY",
	"C4WwFhVc44LxGDQaqCT8XggB84KYXKgS5kIZUsA3ZpZ2rYJ3Enk6gwvBOWYGXr5LZxevQCqxYhTVAD4s",
	"kfvlZsk0pLN5s3Y6T2PnMCMcSsLJAsEsEbKC2ckBwmnYcg2M1z7T2UXjAsySGFigAaK1yBgxSIP46oCJ",
	"lAXLiE1WD+A3oaC06dpaqNK9tgl7/596U6Yi05cvl8ZIPUkS+zTQohADJpJFIcSRdMuSghjUJnk1sF1i",
	"xjWv116nElEcrVBp34zjwXAwtKMgJHIiWTSJTt2rOJLELN3sJcEguxdSaLPf1wuFNqIWdhh3edrWQUqb",
	"KObbpkXOsXJlSWljZDpP5w1w7LyhNm8EXXskcIPc+Q9KnXyuB9kzwD6ASIsOflaYR5Pop2RHH0nNHUlA",
	"HN1xD4xcNtAQ15/Rrd3EvRVpFSQXqn96WmMThW6NqtDFoaXg2mdzMjzeb8D7KstQ67wqijVkzndrrAe2",
	"z6Ph8F5V/FGlPFf1JJ7yFSkYBcZltXU7/vfdhoUmhUJC14DfmTbaxXD2FKl/5PhdYmZLj45JXSMYX3Q6",
	"sYkjXZUlUevD0AlYb96iux2pEUo97YUmjHAmgizd/N3GVlvyRLiaf/wASfhbcsPopkUEV85VDU7HQWSh",
	"LUhCIrUHQdwmkOTGnnUbP74FGtwf5Jl7fy8m8cCCBVshh4qzrxUCo8gNy1kfz3gXLZ6RRJESDSqbRTek",
	"l3/VeHwFb0mJIHIXThjhN3xBoWBf0Nbdp2b9Mrvdcmm01Qr+vy7E42Dyuofu5R78Rwfg7/33wX/0tDjk",
	"wpJexekzQtAV4wAED8xcHwQPzXyAHkEqszw5fHZaJAdotVO2lgh+u8U802D/2fJRpHbSrtE9LtTuQCH8",
	"dpw4DWOzClUBs9qvRG6828aep4QBvBUGdzuvvGx6j5lCc2Xj4bhCBdoIhXRbNUoMuSYanbhiGvRSfONb",
	"Sqo0KhC8WIPgGQ7gD0Tp+Us7q3ZdSb4g5JWpFG5pRm/323rLQKzZd57RbpMU76aVWU53tX00YcFoWz+T",
	"4fn4Nf5Ch0jGo/zsfJydnp+8Pr/OyAjHp6OT+31D2EIdSSGKI4orLKzjo+O7fU3ENrS7yJSA2+xGR6XN",
	"qcUDtvN9dw1tKPbOWuWB5fU+00cosrf09p+WemvIj3/bVDYe0Wt6dn5Cz8YjPCdkOBqfjvJx9hrzYX52",
	"0tu4g/3p1XU+iOeUdM8sp5oC9CqpHxNpyNwBTfcxt9U9h7VK6OxWsdEin7uqjXTmpU2QzCF5wegTiYtW",
	"0k8mLoJK/KfERbsaveKiM5X30Bd3mNL9z/SqR2l8lJS05/VFS/To/fH1W6ZS7uSyvscEhw1LZ3Z67cdK",
	"+zvlESf5cS8L/BFvsNQPuONrXhClyPoHtwn6Tuf0tFM2/8mjJWYsZ1mXgg4dyodATijFbpt6EP9Mtwn/",
	"Q6IhlHZopoPbNud41GrHMBqNPQJbV5yNnA8NLokG4obAdvvh/GQjQbXackOlimgSbW80iWQDf5FZX1TW",
	"N5qDTJTJ6jjaXG7+DgAA///va85K2BcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
