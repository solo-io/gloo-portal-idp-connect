// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
