// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW62/bNhD/Vw7cPrSAIzmOs9j+lsZbYQxrgmX9VBgoLZ5sdhLJkienRuD/fThSduRH",
	"98BegAFL5D1+d/e7Oz2LwtbOGjQUxORZhGKFtYyP33tvPT84bx160hiPC6uQ/2njUEyENoRL9GLbEzWG",
	"IJfxEr/I2lV8/0iSmgB3ViH81Ar0dsqBvDZL1vUogzWHqhEAtDcnOlHpc6M9KjH5kGC9YNhbnG974v62",
	"odWtc5UuJOnk5iioSqOhmToEIPuj8Q1+p/oox8PyejQurkaDm9GikEMcXw0H5wJJlt7J+igP7dNFE9Bf",
	"OGurC4VrrBjExeXXDT1i4ZEOTRXjoVqo69FAXY+HOJKyPxxfDctxcYNlv7we/HGudtEeeZlvWVKb0rJD",
	"haHw2qWEiTdYWo+wsQ0scKlNDwISNA7eVtbCW0n4JDfwYD3JCp40rVjUw71DM5vCnTUGC4JX97Pp3Wtw",
	"3q61Qp/BLys0SZxWOsBs+rCXvX2Y9aK/QhqopZFLBFohJMgBpFEsAw/eqqagANq0PmfTu70LoJUkWCKB",
	"DMEWWhKqDr4WsHwhR8jgB+uh5mg5Fb6Oxxxv8v/hXMTKFmH+akXkwiTP+S0LtrKZtvmysvbCRbG8koSB",
	"8tcZ10hTLOc5c0d5ED2xRh9SJS6zftZnhliHRjotJuIqHvWEk7SKfM67AUW620CnRb3zyIBAmm4GwJbA",
	"BAIrG1oNuEg6AP8MoVGogCwsML4u/UtCpYnlhpnaY384qAJnrxuZZkLXaCi53dsL0V4G7yzhi+bHLlc/",
	"Mh6Da/QQyHpUXH2WUpLkQgaM9NABwso+GQbMl9x8YE21AWsKzOBHRJeIF6JVlqvlrwhlQ41H4KbBQGGn",
	"z3RzHbrxWaoYF5R7OUbCc6TN7cnoSZ2Igd5YtUnzlLMai9OpQf6pHYdpIJ9OLP23Z9XRUNBKzPcydvEJ",
	"CxJxHhxS5tXPrc5reG/05wZBKzSkS40eSuuh4Li1WbZ9momuG/INRr/BWRNSJIP+5V/Kw7ceSzER3+Qv",
	"mytv11Z+ku4zETw2RYEhlE1VbRJaVHuw254Y9vv/GJ60Q8+AmJm1rDSz1jXJ7fV/4fa9wS8OC44Y43Y9",
	"qRbrhKaupd/86QHB3JLLwCy67c6dORs7GEX5s1bbNIcqJDydSNN4zv6S7a7b0x5L0md6zEkvayT0DOr5",
	"6xSeTSNnu7GRhQSO3WmW56kqesLEnc59cszoXqcsx002P2H78DTqA0om7+ow8sjL4b9PkE4awViC0jZG",
	"/Y/8jMlgfh5m44CkiQUnJG3n89EXyG4j/R5p2Tr69Y49ja/EROx2u3Q6Syu9ksSfB+1uzwpb5+tLsZ1v",
	"fwsAAP//X6ZKPVULAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
