// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYUW/bOBL+KwPeAdcCju0kzjX2m+vcLYzFNkbTPBUGwohjm61EsiTl1Aj83xckJZuW",
	"lCjdTZMC+2ZL5MxwZr5vPvGeJDJTUqCwhozuiUlWmFH/c6z4TEuWJ9b9U1oq1Jajf8fQJJory6Vwf/E7",
	"zVSKZFT+gvFsCsVuiBd3iN0ot9BYzcWSbDtE0AwbjRxRxY9UEUJt47ZDNH7LuUZGRp+Dlfm2Q/6ntdT1",
	"iBPJvJfCChcWl6id/wyNoctKCFeW2tzARDKEP4oFDbFrpKaaAh8AFG/awvZh7WPYWZxv3UouFrKWbvIe",
	"F1IjbGQOt7jkogMGLeQKfkulhFlK7ULqDGZSW5rCHbcrt1bDpUIxvYCJFAITC28upxeTt6C0XHOGuguf",
	"VijCcrviBqYXs93a8Wza8Q4TKiCjgi4R7AohSbnrHKCCxSU3wEXhc3ox2bkAu6IWlmiBGiMTTi2yKL4i",
	"YKqU6cL/pYbMHdPlQGfUnd0dNPj93HhUJhMzf7OyVplRr+f+dY1MZZfL3jKV8kj5Zb2UWjS297brqsOt",
	"L1qjvUoGSIesUZtQhONuv9t3LSAVCqo4GZFT/6hDFLUr33O9qIH9AyWNrddzotFFdIAZLvw5XclgynZR",
	"zMpiEe9Y+7RM2c7IeDad7QDj+gyNfS/ZJiBAWBTeP1Uq5Ynf3PtSNHBAfh049IAG/q1xQUbkX709bfQK",
	"zuhFhLF1WTDGrrTMl6sDfNyTa4N6JmXq4y6xnhvUR0rK1O0tMCNvv6AzVsFMFNG8vnbbaUzvQXYXUje3",
	"YDXfRX93SRyB1Tn6kIySwoQsnfSP64W9ypMEjVnkabqBxIdxAJOuO+ug3/+h6jxWgcB9DTmYijVNOQMu",
	"VF66Hf58t3HOaaqRsg3gd25cRrcdcvYSR78W+F1h4lKPnpl9IbhYViqx7RCTZxnVm3ZIRiw6O6DPPUlS",
	"xgKNxiasjFgTphe+EavcV1Iwws3s+hP0ih7s3XO2PWCUG2+7QLnjMro0Dh8xEbtB0jkkot79HkDb0LQp",
	"Wqy374V//kO8FJAFS75GAbng33IEzlBYvuBNrBVcHLCWoppmaFG7s1RDevOxQOFb+EAzBLnw4cQR3uF/",
	"GKT8K7psh6M5v9xtd8xMSsUR80gV3p2o62oDvBrUpf9BHci5SNKcIUTkB4xauovgW456sw8hJsnHfM5r",
	"dDNooZtw8ia6Gbws7oV0fJsL9oqQ98logXxLtzdB/nHMFbhtn/u0JIQ2cHn55FbEwoS78ZmhsD6F4IWt",
	"9nYdj3Thg7S433kTXF1hotHeADcgcI0ajJUaWRmBa9lbatDrOm7ArOSdKNnLTWqQIt2AFAl24XdEFajO",
	"eKtuXUa/Iixym2ssCcqU+12qVKQT3bNAf12Yeq6wG7DyKwrnusSl2+1nGI2P42PhpjbM3btAQuG8D+ml",
	"iX/7bFopOPvw4AfNTuQcMVxj6rYeHTd9V1TE0+N6KPL6FD0Uceh+pyfu3WQUEbcWCYSbKCbfOIxrTGy6",
	"8WQXCtTSm75sdzxNCzEUD8MnCN4nKbC/VTnXGXHdaP98+A7/y/pIh4PF2fkwOT0/eXd+m9ABDk8HJ02l",
	"e7YeiJF6aCoZDtgtOzs/YWfDAZ5T2h8MTweLYfIOF/3F2UlLR30s0vaALC8wMbon4zSVd8gux7ldXSVS",
	"oac6zChPA54EZ4Hs6g3a2oaN4rhE6+vp4lfWpLsENMrRpknRMpgmxRQ6mEleS7ZLvwfJM7zekedTJVsh",
	"eIsztMkzzn66LAPqcuqKCsHO6+m0g85/AYkWivdrqbPm5i+F2bM2f/1qJm9QaNfKy40iV7HGq2MirA1L",
	"9x805gfgMdl9Flrpvx8PPx2fBybz578X8n+5xcz8hWvc3QOqNd281MWReZJSGldqED5ujcKEL3gSsWOb",
	"MmkjAcoYVsv9C8zCfxoRUcb2NFSB+yEnjRmr3ew8kZ+a6clZR70uOSLXKRmR8iabKt4NF9jFBXVxk91N",
	"ZNZbH5PtfPtnAAAA//+uoCSeyBkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
