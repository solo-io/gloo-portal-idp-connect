// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYbW/bNhD+KwduQFvAsZzEWWN/c+NtMIa1xtp8KgKEEU82W4lkScqtEfi/DyQlm5KV",
	"OumyZMCAALEo8t6f5068JakslBQorCHjW2LSJRbU/5woPteSlal1T0pLhdpy9O8YmlRzZbkU7hG/0ULl",
	"SMb1L5jMZ1Cdhnhzj9i1chuN1VwsyKZHBC2wU8gRVfxIVSbsHdz0iMYvJdfIyPhjkHK16ZFftZZ63+JU",
	"Mq+lksKFxQVqp79AY+iiZcJ7S21p4EIyhD+rDR22a6SmHQJvAFRvDpntzdrZsJXoPHk3Ke1yolTOU1pH",
	"uuVUzlHYGWsaQAfno9f4CxsgHQ2zs/NRenp+8vr8JqVDHJ0OT7ocCZLe3pmK0qA+UlLmRwxXmDsjjo7v",
	"FvQeU422KSodDdkNOzs/YWejIZ5TOhiOTofZKH2N2SA7Ozkcq9rblparjdvJRSb3SpO8wUxqhLUs4QYX",
	"XPTAoIVSwe+5lDDPqc2kLmAutaU5fOV26fZqeKdQzKZwIYXA1MLLd7PpxStQWq44Q92HD0sUYbtdcgOz",
	"6Xy7dzKf9bzClAooqKALBLtECDYboILF8DDARaVzNr3YqgC7pBYWaIEaI1NOLbLIvspguqsO04ffpIbC",
	"uetioQu/7BwO+j92usxkaq5eLq1VZpwk7qlvZC77XCaLXMoj5bclObVobPKq77LErU9op7xWJEiPrFCb",
	"kIzj/qA/cEUiFQqqOBmTU7/UI4rapS/pJAK9X1DS2P28Xmh0FjV4hgvvp0sdzNjWinmdNOIVax8Wh5lK",
	"yGQ+m29JxtUbGvtGsnVgDWFReP1RqJNPFegDW+7jkjao82eNGRmTn5Id1SYVzyYRybbLPRJytYWGvPmE",
	"fu+m1xmRRkAyqburp1E2JFZrdYneDqOkMMGbk8HxfgLel2mKxmRlnq8h9bobZd13eR4OBg+K4vciFXi9",
	"w/GZWNGcM+BClbXa0b+vNg40zTVStgb8xo013oazp3D9UuA3hakLPfqu4xPBxaKViU2PmLIoqF4fhk7E",
	"evMG3e1IjTIWaC8WYaUXEXnp6+8utqrJE+F6fvkBkvhdcsvZpkEE115VBU7PQXRhHEhiInWNoNckkOTW",
	"zQWbUL45Wtwv5KlffxCTBGDBgq9QQCn4lxKBMxSWZ7yLZ4KKBs8oqmmBFrXzom3Sy78qPL4C15FBZt6c",
	"2MKv+IJBzj+ji3twzenl7rjjUlLPVeFfG+K9qPLaTfdqD/7DA/AP+rvgP3xaHArpSK8U7Bkh6INxAIIH",
	"aq4LgodqPkKPpKVdnhzunQ7JEVpdla0VQjjuMM8NuD8XPobMVdoN+seF3jUUKu7GiZ9hnFfxVMDdPFig",
	"sEHtVl6ghD68lRZ3J6/jUe/a2SNwhRqMlRpZHTVGLb2hBv1wxQ2YpfwqakpysytIka9BihT78AeiCvxl",
	"vFS3r6CfEbLSlhprmjH1eRdvFQ1rbi0w2l0jxd7k/liDBf/Ho35ryODsXsNFxEiXbb7zbLhtPCFd9x4q",
	"HgWce+Hu8KBzXqmNfb5R5ZnHhG0AOieE7xNEzEgR/XQxkuvnh3twrOzOJtoA1X276GwaWnbkzKG2ydkT",
	"Nc2G00/WNKNI/KeaZjManU2zVZUP6Jv3qNL9z8+yo4NeKkab9fqi0czNfvmGIxOldmOgeUAFxwmbTV31",
	"uiG8OX8/YiU/7kdwaF0WC/MD93zbBao1XX/nK9ncq5NNWmELo7xRmPKMp20KOtTDDoGcMobtNHUg/pm+",
	"kv+HREMZa9FMC7dNzgmoNZ5hDFrXAhtXd9sxNRa4pAaoLwKX7R/nJ2cJ6lXNDaXOyZjUN3VU8X64oKsu",
	"4Kqbun4qi2R1TDZXm78DAAD//+Re6BDcFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
